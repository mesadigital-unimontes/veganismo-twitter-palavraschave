[{"name": "app.py", "content": "from shiny import App, ui, render\nimport pandas as pd\nimport json\n\n# --- 1. LEITURA DOS DADOS ANUAIS (com nome de arquivo atualizado) ---\ntry:\n    df_anual = pd.read_csv(\"T01VEGAN_KEYWORDS_TBL_yyyy.csv\")\nexcept FileNotFoundError:\n    print(\"ERRO: Arquivo 'T01VEGAN_KEYWORDS_TBL_yyyy.csv' n\u00e3o encontrado. Certifique-se de que ele est\u00e1 na mesma pasta que o app.py.\")\n    df_anual = pd.DataFrame() # Cria um DataFrame vazio para o app n\u00e3o quebrar\nexcept Exception as e:\n    print(f\"Ocorreu um erro ao ler 'T01VEGAN_KEYWORDS_TBL_yyyy.csv': {e}\")\n    df_anual = pd.DataFrame()\n\n# --- 2. LEITURA DOS DADOS MENSAIS (com nome de arquivo atualizado) ---\ntry:\n    df_mensal = pd.read_csv(\"T01VEGAN_KEYWORDS_TBL_mm.csv\")\n    # Converte a coluna de data para o formato datetime, essencial para o gr\u00e1fico\n    df_mensal['created_at'] = pd.to_datetime(df_mensal['created_at'])\nexcept FileNotFoundError:\n    print(\"ERRO: Arquivo 'T01VEGAN_KEYWORDS_TBL_mm.csv' n\u00e3o encontrado. Certifique-se de que ele est\u00e1 na mesma pasta que o app.py.\")\n    df_mensal = pd.DataFrame() # Cria um DataFrame vazio para o app n\u00e3o quebrar\nexcept Exception as e:\n    print(f\"Ocorreu um erro ao ler 'T01VEGAN_KEYWORDS_TBL_mm.csv': {e}\")\n    df_mensal = pd.DataFrame()\n\n# --- 3. DEFINI\u00c7\u00c3O DE TODAS AS KEYWORDS (SEM FILTRO) ---\nkeywords = []\n# Apenas define a lista de keywords se o dataframe anual foi carregado com sucesso\nif not df_anual.empty:\n    # Pega todas as colunas, exceto 'created_at'\n    keywords = [col for col in df_anual.columns if col != \"created_at\"]\n    # Ordena a lista alfabeticamente para facilitar a navega\u00e7\u00e3o\n    keywords.sort()\n\n# --- UI com Sidebar Colaps\u00e1vel (CORRIGIDO) ---\napp_ui = ui.page_sidebar(\n    # Defini\u00e7\u00e3o da barra lateral\n    ui.sidebar(\n        ui.input_radio_buttons(\n            \"periodicidade\",\n            \"Selecione a periodicidade:\",\n            {\"Anual\": \"Anual\", \"Mensal\": \"Mensal\"},\n            selected=\"Anual\"\n        ),\n        ui.input_select(\n            \"keyword_select\",\n            \"Selecione a palavra-chave:\",\n            {k: k for k in keywords}, # Usa a lista completa e ordenada\n            selected=\"vegan\"\n        ),\n        title=\"\ud83d\udcca M\u00e9tricas de Tweets\", # T\u00edtulo da p\u00e1gina agora na sidebar\n        collapsible=True, # Permite que a sidebar seja minimizada/expandida\n        collapsed=False, # Come\u00e7a aberta\n    ),\n    \n    # Inclus\u00e3o da biblioteca Highcharts (ARGUMENTO POSICIONAL)\n    ui.tags.head(\n        ui.tags.script(src=\"https://code.highcharts.com/highcharts.js\")\n    ),\n    \n    # Conte\u00fado principal da p\u00e1gina (o gr\u00e1fico) (ARGUMENTO POSICIONAL)\n    ui.card(\n        ui.output_ui(\"grafico_html\"),\n        ui.output_ui(\"grafico_script\"),\n    ),\n    \n    # T\u00edtulo que aparece na aba do navegador (ARGUMENTO NOMEADO - DEVE VIR POR \u00daLTIMO)\n    title=\"An\u00e1lise de M\u00e9tricas de Tweets\",\n)\n\n# --- Server (sem altera\u00e7\u00f5es) ---\ndef server(input, output, session):\n    @render.ui\n    def grafico_html():\n        return ui.HTML('<div id=\"container\" style=\"height: 420px; margin-top:8px;\"></div>')\n\n    @render.ui\n    def grafico_script():\n        kw = input.keyword_select()\n        periodicidade = input.periodicidade()\n        \n        if not kw:\n            return\n\n        if periodicidade == \"Anual\":\n            if df_anual.empty:\n                return ui.tags.script(\"console.log('Dados anuais n\u00e3o dispon\u00edveis');\")\n            df = df_anual\n            x_vals = df[\"created_at\"].astype(str).tolist()\n        else: # Mensal\n            if df_mensal.empty:\n                return ui.tags.script(\"console.log('Dados mensais n\u00e3o dispon\u00edveis');\")\n            df = df_mensal\n            x_vals = df[\"created_at\"].dt.strftime(\"%Y-%m\").tolist()\n        \n        series_data = df[kw].tolist() if kw in df.columns else []\n\n        cfg = {\n            \"chart\": {\"type\": \"area\"},\n            \"title\": {\"text\": f\"M\u00e9tricas de Tweets para \u201c{kw}\u201d ({periodicidade})\"},\n            \"xAxis\": {\"categories\": x_vals},\n            \"yAxis\": {\"title\": {\"text\": \"Quantidade\"}},\n            \"tooltip\": {\n                \"shared\": True,\n                \"crosshairs\": True,\n                \"pointFormat\": '<span style=\"color:{series.color}\">\u25cf</span> {series.name}: <b>{point.y:,.0f}</b><br/>'\n            },\n            \"plotOptions\": {\n                \"area\": {\"stacking\": None, \"marker\": {\"enabled\": False, \"symbol\": \"circle\"}}\n            },\n            \"legend\": {\"enabled\": False},\n            \"series\": [{\n                \"name\": kw,\n                \"data\": series_data,\n                \"color\": \"#696969\",\n                \"type\": \"area\"\n            }],\n            \"credits\": {\"enabled\": False}\n        }\n\n        return ui.tags.script(\n            f\"\"\"\n            (function render() {{\n                var go = (typeof Highcharts !== 'undefined') && document.getElementById('container');\n                if (!go) {{ setTimeout(render, 50); return; }}\n                Highcharts.chart('container', {json.dumps(cfg)});\n            }})();\n            \"\"\"\n        )\n\napp = App(app_ui, server)", "type": "text"}, {"name": "README.md", "content": "# veganismo-twitter-palavraschave", "type": "text"}]