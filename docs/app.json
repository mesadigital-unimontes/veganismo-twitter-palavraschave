[{"name": "app.py", "content": "from shiny import App, ui, render\nimport pandas as pd\nimport json\n\n# --- 1. DEFINI\u00c7\u00c3O DAS URLS P\u00daBLICAS DA PLANILHA GOOGLE SHEETS ---\n# Troque aqui pelos links corretos de cada aba se precisar (usando gid=)\nurl_anual = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vTWmG0Q2NevZYGjFnbdp6UoKFU2gyNWvn8cXTCtaQFzIihipHX0-wyu6v7oPK95ygZlH9FfpS-0gRtH/pub?output=xlsx\"\nurl_mensal = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vRnMQAOeapM6pl3xrqQnxG82kO490G-_uLjtc7wicRvug8t4-bkaaVRAWgDHD_X0oKGCs8siTjlkYcO/pub?output=xlsx\"\n\n# --- 2. LEITURA DOS DADOS A PARTIR DAS URLS ---\ntry:\n    df_anual = pd.read_excel(url_anual)  # use o nome da aba se existir\nexcept Exception as e:\n    print(f\"ERRO: N\u00e3o foi poss\u00edvel carregar o arquivo anual. Erro: {e}\")\n    df_anual = pd.DataFrame()\n\ntry:\n    df_mensal = pd.read_excel(url_mensal)  # use o nome da aba se existir\n    df_mensal['created_at'] = pd.to_datetime(df_mensal['created_at'])\nexcept Exception as e:\n    print(f\"ERRO: N\u00e3o foi poss\u00edvel carregar o arquivo mensal. Erro: {e}\")\n    df_mensal = pd.DataFrame()\n\n# --- 3. KEYWORDS ---\nkeywords = []\nif not df_anual.empty:\n    keywords = [col for col in df_anual.columns if col != \"created_at\"]\n    keywords.sort()\n\n\n# --- UI ---\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_radio_buttons(\n            \"periodicidade\",\n            \"Selecione a periodicidade:\",\n            {\"Anual\": \"Anual\", \"Mensal\": \"Mensal\"},\n            selected=\"Anual\"\n        ),\n        ui.input_select(\n            \"keyword_select\",\n            \"Selecione a palavra-chave:\",\n            {k: k for k in keywords},\n            selected=\"vegan\"\n        ),\n        title=\"M\u00e9tricas de Tweets\",\n        collapsible=True,\n        collapsed=False,\n    ),\n    ui.tags.head(\n        ui.tags.script(src=\"https://code.highcharts.com/highcharts.js\")\n    ),\n    ui.card(\n        ui.output_ui(\"grafico_html\"),\n        ui.output_ui(\"grafico_script\"),\n    ),\n    title=\"An\u00e1lise de M\u00e9tricas de Tweets\",\n)\n\n# --- Server ---\ndef server(input, output, session):\n    @render.ui\n    def grafico_html():\n        return ui.HTML('<div id=\"container\" style=\"height: 420px; margin-top:8px;\"></div>')\n\n    @render.ui\n    def grafico_script():\n        kw = input.keyword_select()\n        periodicidade = input.periodicidade()\n        \n        if not kw:\n            return\n\n        if periodicidade == \"Anual\":\n            if df_anual.empty:\n                return ui.tags.script(\"console.log('Dados anuais n\u00e3o dispon\u00edveis');\")\n            df = df_anual\n            x_vals = df[\"created_at\"].astype(str).tolist()\n        else: # Mensal\n            if df_mensal.empty:\n                return ui.tags.script(\"console.log('Dados mensais n\u00e3o dispon\u00edveis');\")\n            df = df_mensal\n            x_vals = df[\"created_at\"].dt.strftime(\"%Y-%m\").tolist()\n        \n        series_data = df[kw].tolist() if kw in df.columns else []\n\n        cfg = {\n            \"chart\": {\"type\": \"area\"},\n            \"title\": {\"text\": f\"M\u00e9tricas de Tweets para \u201c{kw}\u201d ({periodicidade})\"},\n            \"xAxis\": {\"categories\": x_vals},\n            \"yAxis\": {\"title\": {\"text\": \"Quantidade\"}},\n            \"tooltip\": {\n                \"shared\": True,\n                \"crosshairs\": True,\n                \"pointFormat\": '<span style=\"color:{series.color}\">\u25cf</span> {series.name}: <b>{point.y:,.0f}</b><br/>'\n            },\n            \"plotOptions\": {\n                \"area\": {\"stacking\": None, \"marker\": {\"enabled\": False, \"symbol\": \"circle\"}}\n            },\n            \"legend\": {\"enabled\": False},\n            \"series\": [{\n                \"name\": kw,\n                \"data\": series_data,\n                \"color\": \"#696969\",\n                \"type\": \"area\"\n            }],\n            \"credits\": {\"enabled\": False}\n        }\n\n        return ui.tags.script(\n            f\"\"\"\n            (function render() {{\n                var go = (typeof Highcharts !== 'undefined') && document.getElementById('container');\n                if (!go) {{ setTimeout(render, 50); return; }}\n                Highcharts.chart('container', {json.dumps(cfg)});\n            }})();\n            \"\"\"\n        )\n\napp = App(app_ui, server)", "type": "text"}, {"name": "README.md", "content": "# veganismo-twitter-palavraschave", "type": "text"}]